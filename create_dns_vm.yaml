---
- name: Create dns virtual machine
  vars:
    vm_name: "{{ dns_fqdn }}"
    images_path: "/home/{{ ansible_user_id }}/.okd/images"
    vm_path: "/home/{{ ansible_user_id }}/.okd/vms/{{ vm_name }}"
    boot_init_iso_path: "{{ vm_path }}/boot-init.iso"
    centos7_cloud_image_name: "CentOS-7-x86_64-GenericCloud-1907.qcow2"
    centos7_cloud_image_url: "https://cloud.centos.org/centos/7/images/{{ centos7_cloud_image_name }}"
    sha256sum: "520d01c2f2e1ed24cb2f15a4325aa30773930a2961b5484a68cf11b4a415c512"
  block:
    - name: List virtual machines
      virt:
        command: list_vms
        uri: "qemu:///session"
      register: vms
    - name: Create {{ vm_name }} virtual machine
      block:
        - name: Create {{ vm_name }} virtual machine directories
          file:
            path: "{{ item }}"
            state: directory
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
          with_items:
            - "{{ images_path }}"
            - "{{ vm_path }}"
        - name: Check if centos 7 cloud image is present
          stat:
            path: "{{ images_path }}/{{ centos7_cloud_image_name }}"
          register: centos7_cloud_image
        - name: Download centos 7 cloud image
          become: no
          get_url:
            url: "{{ centos7_cloud_image_url }}"
            dest: "{{ images_path }}"
            sha256sum: "{{ sha256sum }}"
          when: centos7_cloud_image.stat.exists == False
        - name: Copy centos7 cloud image from images to {{ vm_name }} virtual machine
          copy:
            src: "{{ images_path }}/{{ centos7_cloud_image_name }}"
            dest: "{{ vm_path }}/{{ centos7_cloud_image_name }}"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
            force: no
        - name: Create meta-data file
          copy:
            dest: "{{ vm_path }}/meta-data"
            content: |
              instance-id: {{ vm_name }}
              local-hostname: {{ vm_name }}
        - name: Create user-data file
          copy:
            dest: "{{ vm_path }}/user-data"
            content: |
              #cloud-config

              # Hostname management
              preserve_hostname: False
              hostname: {{ dns_fqdn }}
              fqdn: {{ dns_fqdn }}
              manage_etc_hosts: true
              cloud_config_modules:
                - resolv_conf
                - package-update-upgrade-install
                - runcmd
              manage_resolv_conf: true
              resolv_conf:
                nameservers: ['127.0.0.1','8.8.8.8']

              # Users
              users:
                  - default
                  - name: {{ ansible_user_id }}
                    groups: ['wheel']
                    shell: /bin/bash
                    sudo: ALL=(ALL) NOPASSWD:ALL
                    ssh-authorized-keys:
                      - {{ lookup('file', ssh_public_key) }}

              # Configure where output will go
              output:
                all: ">> /var/log/cloud-init.log"

              # configure interaction with ssh server
              ssh_genkeytypes: ['ed25519', 'rsa']

              # Install my public ssh key to the first user-defined user configured
              # in cloud.cfg in the template (which is centos for CentOS cloud images)
              ssh_authorized_keys:
                - {{ lookup('file', ssh_public_key) }}

              timezone: US/Eastern

              packages:
                - dnsmasq
                - bind-utils

              write_files:
                - content: |
                    address=/{{ domain }}/{{ okd_master_ip }}
                    no-hosts
                    addn-hosts=/etc/dnsmasq.okd.addnhosts
                    conf-dir=/etc/dnsmasq.d,.rpmnew,.rpmsave,.rpmorig

                    cache-size=10000
                    log-dhcp
                    log-queries=extra
                    log-facility=/var/log/dnsmasq.log
                  path: /run/myconf/dnsmasq.conf
                - content: |
                  {% for dns_entry in dns_entries %}
                {{ dns_entry.ip }} {{ dns_entry.fqdn }}
                  {% endfor %}

                  path: /run/myconf/dnsmasq.okd.addnhosts
                - content: |
                    # The objectif is to overide the definition of nameserver in /etc/resolv.conf if the vm restart
                    # You can define the localhost or virtual machine ip as nameserver but NOT the bridge ip however it will constantly loop
                    # when you will define it as primary nameserver on the host. You will not be able to resolve ip and to connect via ssh.
                    # The dns virtual machine will be used as primary dns. If it fails to resolve the secondary dns will handle it
                    supersede domain-name-servers 127.0.0.1,8.8.8.8;
                    timeout 300;
                    retry 60;
                  path: /etc/dhcp/dhclient.conf

              # The message is located in /var/log/cloud-init.log
              final_message: "The system is finally up, after $UPTIME seconds"

              # Remove cloud-init when finished with it
              runcmd:
                - systemctl stop network && systemctl start network
                - systemctl disable cloud-init.service
                - /bin/cp /run/myconf/dnsmasq.conf /etc/dnsmasq.conf
                - /bin/cp /run/myconf/dnsmasq.okd.addnhosts /etc/dnsmasq.okd.addnhosts
                - systemctl enable dnsmasq
                - systemctl start dnsmasq
        - name: Create boot init iso
          shell:
            cmd: genisoimage -output {{ boot_init_iso_path }} -volid cidata -joliet -r {{ vm_path }}/user-data {{ vm_path }}/meta-data
        - name: Define {{ vm_name }} virtual machine
          virt:
            command: define
            name: "{{ vm_name }}"
            xml: '{{ lookup("template", "vm.xml.j2") }}'
            uri: "qemu:///session"
          vars:
            name: "{{ vm_name }}"
            memory: 1024
            vcpus: 1
            disk_file: "{{ vm_path }}/{{ centos7_cloud_image_name }}"
            boot_init_iso: "{{ boot_init_iso_path }}"
            vm_mac: "{{ dns_mac }}"
            vm_bridge: "{{ bridge_name }}"
        - name: Start {{ vm_name }} vm
          virt:
            command: start
            name: "{{ vm_name }}"
            autostart: yes
            uri: "qemu:///session"
        - name: Wait for port 22
          wait_for:
            host: "{{ dns_ip }}"
            port: 22
            state: drained
            delay: 10
        - name: |
            Add {{ vm_name }} host to known_hosts - need to retry as ssh is not available yet after the port 22 is open
            An empty valide response can be returned :(
          block:
            - name: Retrieve dns virtual machine public key
              shell: ssh-keyscan -t ssh-rsa {{ dns_ip }}
              register: task_result
              until: task_result.rc == 0 and task_result.stdout != ''
              retries: 120
              delay: 5
            - debug:
                msg: "{{ task_result }}"
            - name: Write dns virtual machine public key into Host known hosts
              lineinfile:
                path: /home/{{ ansible_user_id }}/.ssh/known_hosts
                insertafter: EOF
                line: "{{ dns_fqdn }},{{ task_result.stdout }}"
                backup: yes
        - name: Remove boot-init.iso from {{ vm_name }} vm
          shell:
            cmd: virsh change-media {{ vm_name }} --path {{ boot_init_iso_path }} --eject --config
        - name: Wait until {{ vm_name }} virtual machine is ready
          shell: ssh centos@{{ dns_ip }} 'sudo grep -nri "The system is finally up" /var/log/cloud-init.log' > /dev/null
          register: task_result
          until: task_result.rc == 0
          retries: 120
          delay: 5
        - name: Check {{ vm_name }} dnsmasq service is active
          block:
            - name: Get {{ vm_name }} dnsmasq service status
              shell: ssh centos@{{ dns_ip }} 'sudo systemctl is-active dnsmasq'
              register: is_active
              until: is_active.rc == 0
              retries: 120
              delay: 5
            - debug:
                msg: "{{ is_active }}"
            - name: Ensure {{ vm_name }} dnsmasq service is active
              assert:
                that:
                  - "'active' == is_active.stdout"

        - name: |
            Add dns entry into Host to be able to access virtual machine in '.sandbox.okd'.
            Howto do in Centos7 explains here : https://access.redhat.com/solutions/2817911
            It seems that it is not working as expected after rebooting. So I lock /etc/resolv.conf to ensure
            that no one will change it !
          block:
            - name: Add "dns=none" in /etc/NetworkManager/NetworkManager.conf if not present
              lineinfile:
                path: /etc/NetworkManager/NetworkManager.conf
                regexp: '^dns\=none'
                insertafter: '^\[main\]'
                line: dns=none
                backup: yes
            - name: Add dns virtual machine ip {{ dns_ip }} entry into /etc/resolv.conf
              lineinfile:
                path: /etc/resolv.conf
                regexp: '^nameserver {{ dns_ip }}'
                insertbefore: BOF
                line: nameserver {{ dns_ip }}
                backup: yes
            - name: Lock /etc/resolv.conf to avoid to be rewritten at startup
              shell: chattr +i /etc/resolv.conf
            - name: Reload NetworkManager service
              shell: systemctl reload NetworkManager
          become: true
          become_user: root
      when: vm_name not in vms.list_vms

    - name: Should {{ vm_name }} virtual machine is well configured
      block:
        - debug:
            msg: "{{ dns_entries }}"
        - name:  Should {{ item.vm_name }} virtual machine resolved full qualified domain name entries
          include: dns_fqdn_vm_resolution.yaml
          vars:
            ip_from: "{{ dns_ip }}"
          with_items: "{{ dns_entries }}"
# TODO check SRV cf https://support.microsoft.com/fr-fr/help/816587/how-to-verify-that-srv-dns-records-have-been-created-for-a-domain-cont
        - name: Should external dns resolution is working in {{ vm_name }} virtual machine
          block:
            - name: Execute external DNS resolution
              shell: ssh {{ ansible_user_id }}@{{ dns_ip }} 'dig google.fr +short'
              register: ips_resolved
            - debug:
                msg: "{{ ips_resolved }}"
            - name: Ensure external host is resolved
              assert:
                that:
                  - "ips_resolved is defined"
                  - "ips_resolved.stdout_lines is defined"
                  - "ips_resolved.stdout_lines|length > 0"