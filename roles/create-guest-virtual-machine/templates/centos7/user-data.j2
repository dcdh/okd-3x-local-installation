#cloud-config

# Hostname management
preserve_hostname: False
hostname: {{ vm_fqdn }}
fqdn: {{ vm_fqdn }}
manage_etc_hosts: false
cloud_config_modules:
  - resolv_conf
  - package-update-upgrade-install
  - runcmd
manage_resolv_conf: true

# Users
users:
    - default
    - name: {{ ansible_user_id }}
      groups: ['wheel']
      shell: /bin/bash
      sudo: ALL=(ALL) NOPASSWD:ALL
      ssh-authorized-keys:
        - {{ lookup('file', ssh_public_key) }}

# Configure where output will go
output:
  all: ">> /var/log/cloud-init.log"

# configure interaction with ssh server
ssh_genkeytypes: ['ed25519', 'rsa']

# Install my public ssh key to the first user-defined user configured
# in cloud.cfg in the template (which is centos for CentOS cloud images)
ssh_authorized_keys:
  - {{ lookup('file', ssh_public_key) }}

timezone: US/Eastern

{% if vm_ip == dns_ip %}

########################################################################################################################
# DNS init configuration
########################################################################################################################
resolv_conf:
  nameservers: ['127.0.0.1','8.8.8.8']

packages:
  - dnsmasq
  - bind-utils

write_files:
  - content: |
      address=/{{ okd_master_fqdn }}/{{ okd_master_ip }}
      no-hosts
      addn-hosts=/etc/dnsmasq.okd.addnhosts
      conf-dir=/etc/dnsmasq.d,.rpmnew,.rpmsave,.rpmorig

      cache-size=10000
      log-dhcp
      log-queries=extra
      log-facility=/var/log/dnsmasq.log
    path: /run/myconf/dnsmasq.conf
  - content: |
{% for dns_entry in dns_entries %}
      {{ dns_entry.ip }} {{ dns_entry.fqdn }}
{% endfor %}
    path: /run/myconf/dnsmasq.okd.addnhosts
  - content: |
      # The objectif is to overide the definition of nameserver in /etc/resolv.conf if the vm restart
      # You can define the localhost or virtual machine ip as nameserver but NOT the bridge ip however it will constantly loop
      # when you will define it as primary nameserver on the host. You will not be able to resolve ip and to connect via ssh.
      # The dns virtual machine will be used as primary dns. If it fails to resolve the secondary dns will handle it
      supersede domain-name-servers 127.0.0.1,8.8.8.8;
      timeout 300;
      retry 60;
    path: /etc/dhcp/dhclient.conf

# Remove cloud-init when finished with it
runcmd:
  - systemctl stop network && systemctl start network
  - systemctl disable cloud-init.service
  - /bin/cp /run/myconf/dnsmasq.conf /etc/dnsmasq.conf
  - /bin/cp /run/myconf/dnsmasq.okd.addnhosts /etc/dnsmasq.okd.addnhosts
  - systemctl enable dnsmasq
  - systemctl start dnsmasq

{% elif vm_ip == nfs_ip %}

########################################################################################################################
# NFS init configuration
########################################################################################################################
resolv_conf:
  nameservers: ['{{ dns_ip }}']

packages:
  - nfs-utils
  - bind-utils

write_files:
  - content: |
      {{ lookup('template', 'nfs/etc/idmapd.conf') | indent(width=6, indentfirst=False) }}
    owner: root:root
    path: /etc/idmapd.conf
    permissions: '0644'
  - content: |
      {{ lookup('template', 'nfs/etc/exports') | indent(width=6, indentfirst=False) }}
    owner: root:root
    path: /etc/exports
    permissions: '0644'
  - content: |
      supersede domain-name-servers {{ dns_ip }};
      timeout 300;
      retry 60;
    path: /etc/dhcp/dhclient.conf

# Remove cloud-init when finished with it
runcmd:
  - /usr/bin/mkdir /data
  - /usr/bin/mkdir /data/logging
  - /usr/bin/mkdir /data/registry
  - /usr/bin/mkdir /data/metrics
  - /usr/bin/mkdir /data/nexus
  - /usr/bin/mkdir /data/jenkins
  - chmod -R 777 /data
  - systemctl stop network && systemctl start network
  - systemctl disable cloud-init.service
  - systemctl enable rpcbind nfs-server
  - systemctl start rpcbind nfs-server

{% elif vm_ip == okd_master_ip %}

########################################################################################################################
# OKD MASTER init configuration
# docker configuration howto:
# https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html/day_two_operations_guide/day_two_docker_tasks
########################################################################################################################
resolv_conf:
  nameservers: ['{{ dns_ip }}']

packages:
  - nfs-utils
  - bind-utils
  - docker-1.13.1
  - tree
  - telnet
  - NetworkManager
  - iptables-services
  - origin-node
  - ansible
  - bash-completion
  - dnsmasq
  - ntp
  - logrotate
  - httpd-tools
  - firewalld
  - libselinux-python
  - conntrack-tools
  - openssl
  - iproute
  - python-dbus
  - PyYAML
  - yum-utils
  - glusterfs-fuse
  - device-mapper-multipath
  - nfs-utils
  - iscsi-initiator-utils
  - ceph-common
  - atomic
  - cifs-utils
  - samba-common
  - samba-client
  - iptables
  - libselinux-python
  - ntp
  - python-httplib2

# Add a fix relating to registry console no more working du to a manifest issue after the image has been re-uploaded
# more information here:
# https://github.com/cockpit-project/cockpit/issues/13654
# https://github.com/openshift/openshift-ansible/pull/12122
write_files:
  - content: |
    owner: root:root
    path: /etc/rhsm/ca/redhat-uep.pem
    permissions: '0644'
  - content: |
      supersede domain-name-servers {{ dns_ip }};
      timeout 300;
      retry 60;
    path: /etc/dhcp/dhclient.conf
  - content: |
      {{ lookup('file', domain_crt) | indent(width=6, indentfirst=False) }}
    owner: root:root
    path: /etc/pki/ca-trust/source/anchors/{{ container_registry_fqdn }}.crt
    permissions: '0644'
  - content: |
      {
        "registry-mirrors": ["https://{{ container_registry_fqdn }}"]
      }
    owner: root:root
    path: /etc/docker/daemon.json
    permissions: '0644'

runcmd:
  - systemctl stop network && systemctl start network
  - systemctl disable cloud-init.service
  - groupadd docker
  - usermod -aG docker damien
  - update-ca-trust extract
  - systemctl enable docker
  - systemctl start docker
  - mkdir /data
  - chmod 777 /data
  - mount nfs.local:/data /data
  - echo "nfs.local:/data  /data   nfs      rw,sync,hard,intr  0     0" >> /etc/fstab
  - systemctl enable NetworkManager
  - systemctl start NetworkManager

{% elif false %}

########################################################################################################################
# OTHER init configuration here ...
########################################################################################################################

{% endif %}

# The message is located in /var/log/cloud-init.log
final_message: "The system is finally up, after $UPTIME seconds"
