- name: list virtual machines
  virt:
    command: list_vms
    uri: "qemu:///session"
  register: vms

- name: create {{ vm_name }} virtual machine
  block:
    - name: create {{ vm_name }} virtual machine directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      with_items:
        - "{{ images_path }}"
        - "{{ vm_path }}"

    - name: check if cloud image is present
      stat:
        path: "{{ images_path }}/{{ cloud_image_name }}"
      register: has_cloud_image

    - name: download cloud image
      get_url:
        url: "{{ remote_cloud_image_url }}"
        dest: "{{ images_path }}"
        sha256sum: "{{ remote_cloud_image_sha256sum }}"
      when: has_cloud_image.stat.exists == False

    - name: unarchive cloud image
      shell: xz -v -d {{ images_path }}/{{ remote_cloud_image_name }}
      when: cloud_image_name is match("^.*\.xz$")

    - name: copy cloud image from images to {{ vm_name }} virtual machine
      copy:
        src: "{{ images_path }}/{{ cloud_image_name }}"
        dest: "{{ vm_path }}/{{ cloud_image_name }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        force: no

    - name: Resize image to add 25G more space. At least 7Go needed for /sysroot
      shell: qemu-img resize {{ vm_path }}/{{ cloud_image_name }} 25G

    - name: define dns virtual machine
      include_tasks: define_centos7_virtual_machine.yml
      when: type == 'centos7'

    - name: define container registry virtual machine
      include_tasks: define_fedora_core_os_virtual_machine.yml
      when: type == 'fedora_coreos'

    - name: start {{ vm_name }} vm
      virt:
        command: start
        name: "{{ vm_name }}"
        autostart: yes
        uri: "qemu:///session"

    - name: register ssh guest virtual machine into host
      block:
        - name: retrieve {{ vm_name }} virtual machine public key - need to retry as ssh may not be available yet and an empty valide response can be returned too :(
          shell: ssh-keyscan -t ssh-rsa {{ vm_ip }}
          register: task_result
          until: task_result.rc == 0 and task_result.stdout != ''
          retries: 120
          delay: 5

        - name: write {{ vm_name }} virtual machine public key into Host known hosts
          lineinfile:
            path: /home/{{ ansible_user_id }}/.ssh/known_hosts
            insertafter: EOF
            line: "{{ vm_fqdn }},{{ task_result.stdout }}"
            backup: yes

    - name: wait until {{ vm_name }} virtual machine is ready
      shell: ssh centos@{{ vm_ip }} 'sudo grep -nri "The system is finally up" /var/log/cloud-init.log' > /dev/null
      register: task_result
      until: task_result.rc == 0
      retries: 120
      delay: 5
      when: type == 'centos7'

    - name: wait until unprivilegied {{ ansible_user_id }} can loggin in using ssh
# fatal: [localhost]: FAILED! => {"changed": true, "cmd": "ssh core@10.0.5.59 'dig test.apps.sandbox.okd.local +short'", "delta": "0:00:00.102321", "end": "2020-04-11 19:56:50.886226", "msg": "non-zero return code", "rc": 255, "start": "2020-04-11 19:56:50.783905", "stderr": "\"System is booting up. Unprivileged users are not permitted to log in yet. Please come back later. For technical details, see pam_nologin(8).\"\nAuthentication failed.", "stderr_lines": ["\"System is booting up. Unprivileged users are not permitted to log in yet. Please come back later. For technical details, see pam_nologin(8).\"", "Authentication failed."], "stdout": "", "stdout_lines": []}
      shell: ssh {{ ansible_user_id }}@{{ vm_ip }} 'date'
      register: task_result
      until: task_result.rc == 0
      retries: 120
      delay: 5
      when: type == 'fedora_coreos'

    - name: remove boot-init.iso from {{ vm_name }} vm
      shell: virsh change-media {{ vm_name }} --path {{ boot_init_iso_path }} --eject --config
      when: type == 'centos7'

    - name: check dns virtual machine
      include_tasks: check_dns_virtual_machine.yml
      when: vm_ip == dns_ip

    - name: check container registry virtual machine
      include_tasks: check_container_registry_machine.yml
      when: vm_ip == container_registry_ip

    - name: pull okd images to container registry
      include_tasks: pull_okd_images_to_container_registry.yml
      when: vm_ip == container_registry_ip

    - name: check nfs virtual machine
      include_tasks: check_nfs_virtual_machine.yml
      when: vm_ip == nfs_ip

    - name: check okd master  virtual machine
      include_tasks: check_okd_master_virtual_machine.yml
      when: vm_ip == okd_master_ip

    - name: handle okd images in target virtual machine
      include_tasks: handle_okd_images_in_target_virtual_machine.yml
      loop: "{{ okd_images }}"
      when: vm_ip == okd_master_ip

  become_user: "{{ ansible_user_id }}"
  when: vm_name not in vms.list_vms

- name: host dns setup
  include_tasks: host_dns_setup.yml
  when: vm_ip == dns_ip
